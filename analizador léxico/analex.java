/* The following code was generated by JFlex 1.4.3 on 12/12/16 19:58 */

//* --------------------------Seccion codigo-usuario ------------------------*/ 

import java.io.*;
import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 12/12/16 19:58 from the specification file
 * <tt>AnalizadorLexico.flex</tt>
 */
class analex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMENTARIO = 2;
  public static final int FINAL = 4;
  public static final int CADENA = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\23\1\4\1\1\2\0\1\2\16\23\4\0\1\3\1\7\1\24"+
    "\1\51\1\50\1\17\1\5\1\0\1\53\1\54\1\15\1\13\1\57"+
    "\1\14\1\25\1\16\1\21\11\20\1\0\1\47\1\11\1\10\1\12"+
    "\1\26\1\0\32\22\1\55\1\61\1\56\1\60\1\22\1\0\1\46"+
    "\1\37\1\45\1\43\1\30\1\44\1\52\1\22\1\42\2\22\1\41"+
    "\1\36\1\33\1\40\2\22\1\27\1\34\1\31\1\32\3\22\1\35"+
    "\1\22\1\0\1\6\2\0\41\23\2\0\4\22\4\0\1\22\2\0"+
    "\1\23\7\0\1\22\4\0\1\22\5\0\27\22\1\0\37\22\1\0"+
    "\u01ca\22\4\0\14\22\16\0\5\22\7\0\1\22\1\0\1\22\21\0"+
    "\160\23\5\22\1\0\2\22\2\0\4\22\10\0\1\22\1\0\3\22"+
    "\1\0\1\22\1\0\24\22\1\0\123\22\1\0\213\22\1\0\5\23"+
    "\2\0\236\22\11\0\46\22\2\0\1\22\7\0\47\22\7\0\1\22"+
    "\1\0\55\23\1\0\1\23\1\0\2\23\1\0\2\23\1\0\1\23"+
    "\10\0\33\22\5\0\3\22\15\0\5\23\6\0\1\22\4\0\13\23"+
    "\5\0\53\22\25\23\12\21\4\0\2\22\1\23\143\22\1\0\1\22"+
    "\10\23\1\0\6\23\2\22\2\23\1\0\4\23\2\22\12\21\3\22"+
    "\2\0\1\22\17\0\1\23\1\22\1\23\36\22\33\23\2\0\131\22"+
    "\13\23\1\22\16\0\12\21\41\22\11\23\2\22\4\0\1\22\5\0"+
    "\26\22\4\23\1\22\11\23\1\22\3\23\1\22\5\23\22\0\31\22"+
    "\3\23\104\0\1\22\1\0\13\22\67\0\33\23\1\0\4\23\66\22"+
    "\3\23\1\22\22\23\1\22\7\23\12\22\2\23\2\0\12\21\1\0"+
    "\7\22\1\0\7\22\1\0\3\23\1\0\10\22\2\0\2\22\2\0"+
    "\26\22\1\0\7\22\1\0\1\22\3\0\4\22\2\0\1\23\1\22"+
    "\7\23\2\0\2\23\2\0\3\23\1\22\10\0\1\23\4\0\2\22"+
    "\1\0\3\22\2\23\2\0\12\21\4\22\7\0\1\22\5\0\3\23"+
    "\1\0\6\22\4\0\2\22\2\0\26\22\1\0\7\22\1\0\2\22"+
    "\1\0\2\22\1\0\2\22\2\0\1\23\1\0\5\23\4\0\2\23"+
    "\2\0\3\23\3\0\1\23\7\0\4\22\1\0\1\22\7\0\12\21"+
    "\2\23\3\22\1\23\13\0\3\23\1\0\11\22\1\0\3\22\1\0"+
    "\26\22\1\0\7\22\1\0\2\22\1\0\5\22\2\0\1\23\1\22"+
    "\10\23\1\0\3\23\1\0\3\23\2\0\1\22\17\0\2\22\2\23"+
    "\2\0\12\21\1\0\1\22\17\0\3\23\1\0\10\22\2\0\2\22"+
    "\2\0\26\22\1\0\7\22\1\0\2\22\1\0\5\22\2\0\1\23"+
    "\1\22\7\23\2\0\2\23\2\0\3\23\10\0\2\23\4\0\2\22"+
    "\1\0\3\22\2\23\2\0\12\21\1\0\1\22\20\0\1\23\1\22"+
    "\1\0\6\22\3\0\3\22\1\0\4\22\3\0\2\22\1\0\1\22"+
    "\1\0\2\22\3\0\2\22\3\0\3\22\3\0\14\22\4\0\5\23"+
    "\3\0\3\23\1\0\4\23\2\0\1\22\6\0\1\23\16\0\12\21"+
    "\11\0\1\22\7\0\3\23\1\0\10\22\1\0\3\22\1\0\27\22"+
    "\1\0\12\22\1\0\5\22\3\0\1\22\7\23\1\0\3\23\1\0"+
    "\4\23\7\0\2\23\1\0\2\22\6\0\2\22\2\23\2\0\12\21"+
    "\22\0\2\23\1\0\10\22\1\0\3\22\1\0\27\22\1\0\12\22"+
    "\1\0\5\22\2\0\1\23\1\22\7\23\1\0\3\23\1\0\4\23"+
    "\7\0\2\23\7\0\1\22\1\0\2\22\2\23\2\0\12\21\1\0"+
    "\2\22\17\0\2\23\1\0\10\22\1\0\3\22\1\0\51\22\2\0"+
    "\1\22\7\23\1\0\3\23\1\0\4\23\1\22\10\0\1\23\10\0"+
    "\2\22\2\23\2\0\12\21\12\0\6\22\2\0\2\23\1\0\22\22"+
    "\3\0\30\22\1\0\11\22\1\0\1\22\2\0\7\22\3\0\1\23"+
    "\4\0\6\23\1\0\1\23\1\0\10\23\22\0\2\23\15\0\60\22"+
    "\1\23\2\22\7\23\4\0\10\22\10\23\1\0\12\21\47\0\2\22"+
    "\1\0\1\22\2\0\2\22\1\0\1\22\2\0\1\22\6\0\4\22"+
    "\1\0\7\22\1\0\3\22\1\0\1\22\1\0\1\22\2\0\2\22"+
    "\1\0\4\22\1\23\2\22\6\23\1\0\2\23\1\22\2\0\5\22"+
    "\1\0\1\22\1\0\6\23\2\0\12\21\2\0\4\22\40\0\1\22"+
    "\27\0\2\23\6\0\12\21\13\0\1\23\1\0\1\23\1\0\1\23"+
    "\4\0\2\23\10\22\1\0\44\22\4\0\24\23\1\0\2\23\5\22"+
    "\13\23\1\0\44\23\11\0\1\23\71\0\53\22\24\23\1\22\12\21"+
    "\6\0\6\22\4\23\4\22\3\23\1\22\3\23\2\22\7\23\3\22"+
    "\4\23\15\22\14\23\1\22\1\23\12\21\4\23\2\0\46\22\1\0"+
    "\1\22\5\0\1\22\2\0\53\22\1\0\u014d\22\1\0\4\22\2\0"+
    "\7\22\1\0\1\22\1\0\4\22\2\0\51\22\1\0\4\22\2\0"+
    "\41\22\1\0\4\22\2\0\7\22\1\0\1\22\1\0\4\22\2\0"+
    "\17\22\1\0\71\22\1\0\4\22\2\0\103\22\2\0\3\23\40\0"+
    "\20\22\20\0\125\22\14\0\u026c\22\2\0\21\22\1\0\32\22\5\0"+
    "\113\22\3\0\3\22\17\0\15\22\1\0\4\22\3\23\13\0\22\22"+
    "\3\23\13\0\22\22\2\23\14\0\15\22\1\0\3\22\1\0\2\23"+
    "\14\0\64\22\40\23\3\0\1\22\3\0\2\22\1\23\2\0\12\21"+
    "\41\0\3\23\2\0\12\21\6\0\130\22\10\0\51\22\1\23\1\22"+
    "\5\0\106\22\12\0\35\22\3\0\14\23\4\0\14\23\12\0\12\21"+
    "\36\22\2\0\5\22\13\0\54\22\4\0\21\23\7\22\2\23\6\0"+
    "\12\21\46\0\27\22\5\23\4\0\65\22\12\23\1\0\35\23\2\0"+
    "\1\23\12\21\6\0\12\21\15\0\1\22\130\0\5\23\57\22\21\23"+
    "\7\22\4\0\12\21\21\0\11\23\14\0\3\23\36\22\15\23\2\22"+
    "\12\21\54\22\16\23\14\0\44\22\24\23\10\0\12\21\3\0\3\22"+
    "\12\21\44\22\122\0\3\23\1\0\25\23\4\22\1\23\4\22\3\23"+
    "\2\22\11\0\300\22\47\23\25\0\4\23\u0116\22\2\0\6\22\2\0"+
    "\46\22\2\0\6\22\2\0\10\22\1\0\1\22\1\0\1\22\1\0"+
    "\1\22\1\0\37\22\2\0\65\22\1\0\7\22\1\0\1\22\3\0"+
    "\3\22\1\0\7\22\3\0\4\22\2\0\6\22\4\0\15\22\5\0"+
    "\3\22\1\0\7\22\16\0\5\23\32\0\5\23\20\0\2\22\23\0"+
    "\1\22\13\0\5\23\5\0\6\23\1\0\1\22\15\0\1\22\20\0"+
    "\15\22\3\0\33\22\25\0\15\23\4\0\1\23\3\0\14\23\21\0"+
    "\1\22\4\0\1\22\2\0\12\22\1\0\1\22\3\0\5\22\6\0"+
    "\1\22\1\0\1\22\1\0\1\22\1\0\4\22\1\0\13\22\2\0"+
    "\4\22\5\0\5\22\4\0\1\22\21\0\51\22\u0a77\0\57\22\1\0"+
    "\57\22\1\0\205\22\6\0\4\22\3\23\2\22\14\0\46\22\1\0"+
    "\1\22\5\0\1\22\2\0\70\22\7\0\1\22\17\0\1\23\27\22"+
    "\11\0\7\22\1\0\7\22\1\0\7\22\1\0\7\22\1\0\7\22"+
    "\1\0\7\22\1\0\7\22\1\0\7\22\1\0\40\23\57\0\1\22"+
    "\u01d5\0\3\22\31\0\11\22\6\23\1\0\5\22\2\0\5\22\4\0"+
    "\126\22\2\0\2\23\2\0\3\22\1\0\132\22\1\0\4\22\5\0"+
    "\51\22\3\0\136\22\21\0\33\22\65\0\20\22\u0200\0\u19b6\22\112\0"+
    "\u51cd\22\63\0\u048d\22\103\0\56\22\2\0\u010d\22\3\0\20\22\12\21"+
    "\2\22\24\0\57\22\1\23\4\0\12\23\1\0\31\22\7\0\1\23"+
    "\120\22\2\23\45\0\11\22\2\0\147\22\2\0\4\22\1\0\4\22"+
    "\14\0\13\22\115\0\12\22\1\23\3\22\1\23\4\22\1\23\27\22"+
    "\5\23\20\0\1\22\7\0\64\22\14\0\2\23\62\22\21\23\13\0"+
    "\12\21\6\0\22\23\6\22\3\0\1\22\4\0\12\21\34\22\10\23"+
    "\2\0\27\22\15\23\14\0\35\22\3\0\4\23\57\22\16\23\16\0"+
    "\1\22\12\21\46\0\51\22\16\23\11\0\3\22\1\23\10\22\2\23"+
    "\2\0\12\21\6\0\27\22\3\0\1\22\1\23\4\0\60\22\1\23"+
    "\1\22\3\23\2\22\2\23\5\22\2\23\1\22\1\23\1\22\30\0"+
    "\3\22\2\0\13\22\5\23\2\0\3\22\2\23\12\0\6\22\2\0"+
    "\6\22\2\0\6\22\11\0\7\22\1\0\7\22\221\0\43\22\10\23"+
    "\1\0\2\23\2\0\12\21\6\0\u2ba4\22\14\0\27\22\4\0\61\22"+
    "\u2104\0\u016e\22\2\0\152\22\46\0\7\22\14\0\5\22\5\0\1\22"+
    "\1\23\12\22\1\0\15\22\1\0\5\22\1\0\1\22\1\0\2\22"+
    "\1\0\2\22\1\0\154\22\41\0\u016b\22\22\0\100\22\2\0\66\22"+
    "\50\0\15\22\3\0\20\23\20\0\7\23\14\0\2\22\30\0\3\22"+
    "\31\0\1\22\6\0\5\22\1\0\207\22\2\0\1\23\4\0\1\22"+
    "\13\0\12\21\7\0\32\22\4\0\1\22\1\0\32\22\13\0\131\22"+
    "\3\0\6\22\2\0\6\22\2\0\6\22\2\0\3\22\3\0\2\22"+
    "\3\0\2\22\22\0\3\23\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\2\2\1\3\1\4\2\5\1\6\1\7"+
    "\2\10\5\11\2\1\1\12\1\1\1\13\2\1\1\14"+
    "\1\15\1\16\1\17\1\20\1\5\1\21\1\22\1\0"+
    "\1\22\1\23\1\24\1\0\1\25\1\6\1\10\1\0"+
    "\1\26\1\27\1\30\1\11\1\31\1\32\1\33\3\0"+
    "\1\34\1\0\1\35\3\0\1\36\11\0\1\37\2\0"+
    "\1\40\1\0\1\41\42\0\1\42";

  private static int [] zzUnpackAction() {
    int [] result = new int[111];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\310\0\372\0\310"+
    "\0\310\0\u012c\0\u015e\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258"+
    "\0\u028a\0\u02bc\0\u02ee\0\u0320\0\u0352\0\u0384\0\310\0\u03b6"+
    "\0\310\0\u03e8\0\u041a\0\310\0\310\0\310\0\310\0\310"+
    "\0\310\0\310\0\u044c\0\u044c\0\u047e\0\310\0\u04b0\0\u04b0"+
    "\0\310\0\310\0\310\0\u04e2\0\310\0\310\0\310\0\u0514"+
    "\0\310\0\310\0\u0546\0\u0578\0\u0384\0\u05aa\0\u05dc\0\u041a"+
    "\0\310\0\u047e\0\u060e\0\u0640\0\310\0\u0672\0\u06a4\0\u06d6"+
    "\0\u0708\0\u073a\0\u076c\0\u079e\0\u07d0\0\u0802\0\u076c\0\u0834"+
    "\0\u0866\0\310\0\u0898\0\310\0\u08ca\0\u08fc\0\u092e\0\u0960"+
    "\0\u0992\0\u09c4\0\u09f6\0\u0a28\0\u0a5a\0\u0a8c\0\u0abe\0\u0af0"+
    "\0\u0b22\0\u0b54\0\u0b86\0\u0bb8\0\u0bea\0\u0c1c\0\u0c4e\0\u0c80"+
    "\0\u0cb2\0\u0ce4\0\u0d16\0\u0d48\0\u0d7a\0\u0dac\0\u0dde\0\u0e10"+
    "\0\u0e42\0\u0e74\0\u0ea6\0\u0ed8\0\u0f0a\0\u0f3c\0\u0f6e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[111];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\5\1\26\1\5\1\27\1\30\1\5\20\26"+
    "\1\31\1\32\1\33\1\26\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\6\43\1\45\51\43"+
    "\1\46\1\0\60\46\1\47\1\50\22\47\1\51\35\47"+
    "\63\0\1\6\65\0\1\52\62\0\1\52\63\0\1\53"+
    "\61\0\1\53\26\0\1\54\32\0\1\53\1\41\60\0"+
    "\1\53\1\0\1\41\57\0\1\55\61\0\1\56\61\0"+
    "\1\57\4\0\1\60\54\0\1\61\61\0\1\62\71\0"+
    "\2\63\47\0\1\64\10\0\4\65\3\0\20\65\1\0"+
    "\1\65\1\0\1\65\34\0\1\66\43\0\1\64\10\0"+
    "\2\65\1\67\1\65\3\0\20\67\1\0\1\67\1\0"+
    "\1\67\7\0\1\70\1\71\60\70\10\44\1\72\61\44"+
    "\1\72\17\44\1\73\31\44\24\50\1\51\35\50\30\0"+
    "\1\74\41\0\1\75\71\0\2\63\3\0\1\76\62\0"+
    "\1\77\41\0\1\100\62\0\1\64\10\0\4\67\3\0"+
    "\20\67\1\0\1\67\1\0\1\67\7\0\10\44\1\72"+
    "\22\44\1\101\26\44\52\0\1\102\27\0\1\103\70\0"+
    "\1\104\57\0\1\105\34\0\10\44\1\72\32\44\1\71"+
    "\16\44\42\0\1\106\37\0\2\107\70\0\1\110\56\0"+
    "\1\111\67\0\1\112\57\0\1\113\55\0\1\114\66\0"+
    "\1\115\56\0\1\116\65\0\1\117\62\0\1\120\62\0"+
    "\1\121\62\0\1\122\62\0\1\123\62\0\1\124\62\0"+
    "\1\125\54\0\1\126\62\0\1\127\62\0\1\130\23\0"+
    "\1\131\1\0\60\131\42\0\1\132\62\0\1\133\46\0"+
    "\1\134\64\0\1\135\57\0\1\136\72\0\1\137\63\0"+
    "\1\140\57\0\1\141\64\0\1\142\62\0\1\143\56\0"+
    "\1\144\56\0\1\145\50\0\1\146\76\0\1\147\47\0"+
    "\1\150\62\0\1\151\73\0\1\152\56\0\1\153\57\0"+
    "\1\154\54\0\1\155\75\0\1\156\34\0\1\157\4\0"+
    "\20\157\1\0\1\157\1\0\1\157\27\0\4\157\3\0"+
    "\20\157\1\0\1\157\1\0\1\157\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4000];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\2\11\1\1\2\11\15\1\1\11\1\1\1\11"+
    "\2\1\7\11\1\1\1\0\1\1\1\11\1\1\1\0"+
    "\3\11\1\0\3\11\1\1\2\11\1\1\3\0\1\1"+
    "\1\0\1\11\3\0\1\11\11\0\1\1\2\0\1\11"+
    "\1\0\1\11\42\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[111];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	public void ComprobarPalabra(String palabra){
		
		switch(palabra){
			case "require": 
				return symbol(sym.require);
				break;
			case "end":
				return symbol(sym.end);
				break;
			case "def":
				return symbol(sym.def);
				break;
			case "return":
				return symbol(sym.return);
				break;
			case "if":
				return symbol(sym.if);
				break;
			case "then":
				return symbol(sym.then);
				break;
			case "begin":
				return symbol(sym.begin);
				break;
			case "else":
				return symbol(sym.else);
				break;
			case "case":
				return symbol(sym.case);
				break;
			case "when":
				return symbol(sym.when);
				break;
			case "until":
				return symbol(sym.until);
				break;
			case "do":
				return symbol(sym.do);
				break;
			case "elseif":
				return symbol(sym.elseif);
				break;
			case "unless":
				return symbol(sym.unless);
				break;
			case "while":
				return symbol(sym.while);
				break;
			case "retry":
				return symbol(sym.retry);
				break;			
			case "break":
				return symbol(sym.break);
				break;
			case "for":
				Sreturn symbol(sym.for);
				break;
			case "in":
				return symbol(sym.in);
				break;
			case "true":
				return symbol(sym.boolean);
				break;
			case "false":
				return symbol(sym.boolean);
				break;
				
			case "and":
				return symbol(sym.comparadorbol1);
				break;
			case "or":
				return symbol(sym.comparadorbol1);
				break;
			case "not":
				return symbol(sym.comparadorbol2);
				break;
			case "nil":
				return symbol(sym.nulo);
				break;
			default:
				return symbol(sym.identificador);
				break;
			

		}

	}

	public  void ComprobarBoleano(String token){
		switch(token){
			case "&&": 
				return symbol(sym.comparadorbol1);
				break;
			case "||": 
				System.out.println("Operador booleano <"+token+"> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
				break;
			case "!": 
				return symbol(sym.comparadorbol2);
				break;
			case "~": 
				return symbol(sym.comparadorbol2);
				break;
		}
	}

	public  void ComprobarOperador(String token){
		switch(token){
			case "+": 
				return symbol(sym.suma);
				break;
			case "-": 
				return symbol(sym.resta);
				break;
			case "*": 
				return symbol(sym.mult);
				break;
			case "/": 
				return symbol(sym.division);
				break;
			case "%": 
				return symbol(sym.porcentaje);
				break;
			case "**": 
				return symbol(sym.elevado);
				break;
		}
	}

	public  void ComprobarComparador(String token){
		switch(token){
			case "==": 
				return symbol(sym.comparadores1);
				break;
			case "!=": 
				return symbol(sym.comparadores1);
				break;
			case "<=": 
				return symbol(sym.comparadores2);
				break;
			case ">=": 
				return symbol(sym.comparadores2);
				break;
			case "<": 
				return symbol(sym.comparadores2);
				break;
			case ">": 
				return symbol(sym.comparadores2);
				break;
		}
	}
 


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  analex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  analex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2250) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Object next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 34: 
          { ComprobarPalabra(yytext());
          }
        case 35: break;
        case 21: 
          { return symbol(sym.cadena);
          }
        case 36: break;
        case 8: 
          { ComprobarComparador(yytext());
          }
        case 37: break;
        case 12: 
          { return symbol(sym.parentesisabierto);
          }
        case 38: break;
        case 27: 
          { return symbol(sym.entero);
          }
        case 39: break;
        case 15: 
          { return symbol(sym.corchetecerrado);
          }
        case 40: break;
        case 25: 
          { return symbol(sym.divisionigual);
          }
        case 41: break;
        case 2: 
          { return symbol(sym.crlf);
          }
        case 42: break;
        case 11: 
          { return symbol(sym.puntoycoma);
          }
        case 43: break;
        case 3: 
          { /* ignora los espacios en blanco */
          }
        case 44: break;
        case 4: 
          { /* ignora los tabuladores */
          }
        case 45: break;
        case 5: 
          { return symbol(sym.comparadoresbit);
          }
        case 46: break;
        case 13: 
          { return symbol(sym.parentesiscerrado);
          }
        case 47: break;
        case 9: 
          { ComprobarOperador(yytext());
          }
        case 48: break;
        case 28: 
          { return symbol(sym.id_global);
          }
        case 49: break;
        case 23: 
          { return symbol(sym.menosigual);
          }
        case 50: break;
        case 26: 
          { return symbol(sym.porcentajeigual);
          }
        case 51: break;
        case 22: 
          { return symbol(sym.masigual);
          }
        case 52: break;
        case 33: 
          { return symbol(sym.rango);
          }
        case 53: break;
        case 6: 
          { ComprobarBoleano(yytext());
          }
        case 54: break;
        case 14: 
          { return symbol(sym.corcheteabierto);
          }
        case 55: break;
        case 7: 
          { return symbol(sym.igual);
          }
        case 56: break;
        case 31: 
          { return symbol(sym.float);
          }
        case 57: break;
        case 18: 
          { System.out.println("Error no ha terminado el comentario");yybegin(FINAL);
          }
        case 58: break;
        case 20: 
          { System.out.println("Error no se ha cerrado la cadena");yybegin(FINAL);
          }
        case 59: break;
        case 10: 
          { yybegin(CADENA);
          }
        case 60: break;
        case 29: 
          { return symbol(sym.comentarios);
          }
        case 61: break;
        case 24: 
          { return symbol(sym.multigual);
          }
        case 62: break;
        case 16: 
          { return symbol(sym.coma);
          }
        case 63: break;
        case 32: 
          { yybegin(COMENTARIO);
          }
        case 64: break;
        case 30: 
          { return symbol(sym.elevadoigual);
          }
        case 65: break;
        case 1: 
          { System.out.println("Token No Valido <" +yytext()+ ">linea: " + (yyline+1) + " columna: " + (yycolumn+1));
          }
        case 66: break;
        case 19: 
          { System.exit(0);
          }
        case 67: break;
        case 17: 
          { return symbol(sym.escapedquote);
          }
        case 68: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
